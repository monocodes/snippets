# docker-s1 -------------------------------------

#################################################
# nodejs image with app - docker-s1
# first-demo-docker
#################################################
FROM node:14

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD [ "node", "app.mjs" ]





# docker-s2 ------------------------------------- 

#################################################
# python image with app - docker-s2
# bmi-app-py
#################################################
FROM python

WORKDIR /app

COPY . /app

CMD ["python", "bmi.py"]



#################################################
# nodejs image with app - docker-s2
# hello-world-web-nodejs
#################################################
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD ["node", "server.js"]



#################################################
# nodejs image with app - docker-s2
# goals-web-nodejs
#################################################
FROM node

WORKDIR /app

COPY package.json /app

RUN npm install

COPY . /app

EXPOSE 80

CMD ["node", "server.js"]



#################################################
# python image with app - docker-s2
# rng-app-py
#################################################
FROM python

WORKDIR /app

COPY . /app

CMD ["python", "rng.py"]





# docker-s3 ------------------------------------- 

#################################################
# nodejs image with app - docker-s3
# feedback-web-nodejs
#################################################
FROM node:14

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

ARG DEFAULT_PORT=80

ENV PORT $DEFAULT_PORT

EXPOSE $PORT

# VOLUME ["/app/node_modules"]

# VOLUME ["/app/temp"]

CMD ["npm", "start"]


### .dockerignore
# nodejs
# node_modules/

# git
# .git/

# Dockerfile
# Dockerfile





# docker-s4 ------------------------------------- 

#################################################
# nodejs image with app - docker-s4
# favorites-web-nodejs
#################################################
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

CMD ["node", "app.js"]





# docker-s5 ------------------------------------- 

#################################################
# nodejs image with app - docker-s5
# goals-multi-web-nodejs
#################################################

# backend ---------------------------------------
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 80

ENV MONGODB_USERNAME=root
ENV MONGODB_PASSWORD=secret

CMD ["npm", "start"]


### .dockerignore
# node_modules
# Dockerfile
# .git


# frontend --------------------------------------
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD [ "npm", "start" ]


### .dockerignore
# node_modules
# Dockerfile
# .git




# docker-s6 ------------------------------------- 

#################################################
# nodejs image with app - docker-s6
# goals-web-nodejs-comp
#################################################

# backend ---------------------------------------
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 80

ENV MONGODB_USERNAME=root
ENV MONGODB_PASSWORD=secret

CMD ["npm", "start"]


### .dockerignore
# node_modules
# Dockerfile
# .git



# frontend --------------------------------------
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD [ "npm", "start" ]


# .dockerignore
# node_modules
# .git
# Dockerfile





# docker-s7 ------------------------------------- 

#################################################
# nodejs image with app - docker-s7
# util-nodejs
#################################################
FROM node:14-alpine

WORKDIR /app

ENTRYPOINT [ "npm" ]





# docker-s8 -------------------------------------

#################################################
# laravel-php-web-docker - docker-s8
#################################################

# composer.dockerfile ---------------------------
FROM composer:latest

RUN addgroup -g 1000 laravel && adduser -G laravel -g laravel -s /bin/sh -D laravel

USER laravel 

WORKDIR /var/www/html

ENTRYPOINT [ "composer", "--ignore-platform-reqs" ]
# --ignore-platform-reqs ensures that we can run
#this without any warnings or errors even if some
#dependencies would be missing



# nginx.dockerfile ------------------------------
FROM nginx:stable-alpine
 
WORKDIR /etc/nginx/conf.d
 
COPY nginx/nginx.conf .
 
RUN mv nginx.conf default.conf

WORKDIR /var/www/html
 
COPY src .



# php.dockerfile --------------------------------
FROM php:8.1-fpm-alpine

WORKDIR /var/www/html
 
COPY src .
 
RUN docker-php-ext-install pdo pdo_mysql
 
RUN addgroup -g 1000 laravel && adduser -G laravel -g laravel -s /bin/sh -D laravel

USER laravel 
 
# RUN chown -R laravel:laravel .





# docker-s9 -------------------------------------

#################################################
# nodejs and reactjs images with apps - docker-s9
# goals-web-nodejs-dep
# deployed to AWS ECS and MongoDB Atlas
#################################################

# backend ---------------------------------------
FROM node:14-alpine

WORKDIR /app

ENTRYPOINT [ "npm" ]


# backend.env -----------------------------------
# MONGODB_USERNAME=
# MONGODB_PASSWORD=
# MONGODB_URL=cluster0.ilhh8s7.mongodb.net
# MONGODB_NAME=goals-dev


# mongo.env -------------------------------------
# MONGO_INITDB_ROOT_USERNAME=
# MONGO_INITDB_ROOT_PASSWORD=



# frontend prod aws -----------------------------
# Dockerfile.prod
FROM node:14-alpine as build

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

RUN npm run build

FROM nginx:stable-alpine

COPY --from=build /app/build /usr/share/nginx/html

EXPOSE 80

CMD ["nginx", "-g", "daemon off;"]



# frontend local --------------------------------
FROM node

WORKDIR /app

COPY package.json .

RUN npm install

COPY . .

EXPOSE 3000

CMD [ "npm", "start" ]