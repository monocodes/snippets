events {

}

http {
    include /etc/nginx/mime.types

    server {
        listen 80;
        server_name nginx-handbook.test;

        location / {
            proxy_pass http:localhost:3000;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
        }
    }
}

# The proxy_http_version directive sets the HTTP version for the server. By default it's 1.0, but web socket requires it to be at least 1.1. The proxy_set_header directive is used for setting a header on the back-end server. Generic syntax for this directive is as follows:

# proxy_set_header <header name> <header value>

# So, by writing proxy_set_header Upgrade $http_upgrade; you're instructing NGINX to pass the value of the $http_upgrade variable as a header named Upgrade â€“ same for the Connection header.

# If you would like to learn more about web socket proxying, this link to the official NGINX docs may help.

# Depending on the headers required by your application, you may have to set more of them. But the above mentioned configuration is very commonly used to serve Node.js applications.